{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user-auth.service\";\nconst BASIC_URL = [\"http://localhost:8080\"];\nexport class EmployeeService {\n  constructor(http, userAuthService) {\n    this.http = http;\n    this.userAuthService = userAuthService;\n    this.requestHeader = new HttpHeaders({\n      \"No-Auth\": \"True\"\n    });\n  }\n  login(loginData) {\n    return this.http.post(BASIC_URL + \"/api/auth/signin\", loginData, {\n      headers: this.requestHeader\n    });\n  }\n  postEmployee(employee) {\n    return this.http.post(BASIC_URL + \"/api/employee_management/save\", employee);\n  }\n  postUser(user) {\n    return this.http.post(BASIC_URL + \"/api/employee_management/save\", employee);\n  }\n  getAllEmployee() {\n    return this.http.get(BASIC_URL + \"/api/employee_management/getRecord\");\n  }\n  getEmployeeById(id) {\n    return this.http.get(BASIC_URL + \"/api/employee_management/getRecordById/\" + id);\n  }\n  updateEmployee(id, employee) {\n    return this.http.put(BASIC_URL + \"/api/employee_management/update/\" + id, employee);\n  }\n  deleteEmployee(id) {\n    return this.http.delete(BASIC_URL + \"/api/employee_management/delete/\" + id);\n  }\n  roleMatch(allowedRoles) {\n    let isMatch = false;\n    const roles = this.userAuthService.getRoles();\n    if (roles != null && roles) {\n      for (let i = 0; i < roles.length; i++) {\n        for (let j = 0; j < allowedRoles.length; j++) {\n          if (roles[i].roleName === allowedRoles[j]) {\n            isMatch = true;\n            return isMatch;\n          }\n        }\n      }\n    }\n    return false;\n  }\n  static #_ = this.ɵfac = function EmployeeService_Factory(t) {\n    return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserAuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeeService,\n    factory: EmployeeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","BASIC_URL","EmployeeService","constructor","http","userAuthService","requestHeader","login","loginData","post","headers","postEmployee","employee","postUser","user","getAllEmployee","get","getEmployeeById","id","updateEmployee","put","deleteEmployee","delete","roleMatch","allowedRoles","isMatch","roles","getRoles","i","length","j","roleName","_","i0","ɵɵinject","i1","HttpClient","i2","UserAuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\IntelijIDEA Projfile\\employee_management\\src\\app\\service\\employee.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserAuthService } from './user-auth.service';\n\nconst BASIC_URL = [\"http://localhost:8080\"];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployeeService {\n\n  requestHeader = new HttpHeaders({\n    \"No-Auth\":\"True\"\n  })\n\n  constructor(private http: HttpClient,\n    private userAuthService:UserAuthService\n    ) { }\n\n  login(loginData: any): Observable<any> {\n    return this.http.post(BASIC_URL + \"/api/auth/signin\", loginData, {headers:this.requestHeader});\n  }\n  postEmployee(employee: any): Observable<any> {\n    return this.http.post(BASIC_URL + \"/api/employee_management/save\", employee);\n  }\n\n  postUser(user: any): Observable<any> {\n    return this.http.post(BASIC_URL + \"/api/employee_management/save\", employee);\n  }\n\n  getAllEmployee():Observable<any>{\n    return this.http.get(BASIC_URL + \"/api/employee_management/getRecord\");\n  }\n\n  getEmployeeById(id: number):Observable<any>{\n    return this.http.get(BASIC_URL + \"/api/employee_management/getRecordById/\" + id);\n  }\n\n  updateEmployee(id: number, employee:any):Observable<any>{\n    return this.http.put(BASIC_URL + \"/api/employee_management/update/\" + id, employee);\n  }\n\n  deleteEmployee(id: number):Observable<any>{\n    return this.http.delete(BASIC_URL + \"/api/employee_management/delete/\" + id);\n  }\n\n  public roleMatch(allowedRoles:any):boolean{\n    let isMatch = false;\n    const roles:any = this.userAuthService.getRoles();\n    if(roles != null && roles){\n      for(let i = 0; i<roles.length; i++){\n        for(let j = 0; j<allowedRoles.length; j++){\n          if (roles[i].roleName === allowedRoles[j]) {\n            isMatch = true;\n            return isMatch;\n          }\n        }\n      }\n    }\n    return false;\n  }\n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAK9D,MAAMC,SAAS,GAAG,CAAC,uBAAuB,CAAC;AAK3C,OAAM,MAAOC,eAAe;EAM1BC,YAAoBC,IAAgB,EAC1BC,eAA+B;IADrB,KAAAD,IAAI,GAAJA,IAAI;IACd,KAAAC,eAAe,GAAfA,eAAe;IALzB,KAAAC,aAAa,GAAG,IAAIN,WAAW,CAAC;MAC9B,SAAS,EAAC;KACX,CAAC;EAII;EAENO,KAAKA,CAACC,SAAc;IAClB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAACR,SAAS,GAAG,kBAAkB,EAAEO,SAAS,EAAE;MAACE,OAAO,EAAC,IAAI,CAACJ;IAAa,CAAC,CAAC;EAChG;EACAK,YAAYA,CAACC,QAAa;IACxB,OAAO,IAAI,CAACR,IAAI,CAACK,IAAI,CAACR,SAAS,GAAG,+BAA+B,EAAEW,QAAQ,CAAC;EAC9E;EAEAC,QAAQA,CAACC,IAAS;IAChB,OAAO,IAAI,CAACV,IAAI,CAACK,IAAI,CAACR,SAAS,GAAG,+BAA+B,EAAEW,QAAQ,CAAC;EAC9E;EAEAG,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAACf,SAAS,GAAG,oCAAoC,CAAC;EACxE;EAEAgB,eAAeA,CAACC,EAAU;IACxB,OAAO,IAAI,CAACd,IAAI,CAACY,GAAG,CAACf,SAAS,GAAG,yCAAyC,GAAGiB,EAAE,CAAC;EAClF;EAEAC,cAAcA,CAACD,EAAU,EAAEN,QAAY;IACrC,OAAO,IAAI,CAACR,IAAI,CAACgB,GAAG,CAACnB,SAAS,GAAG,kCAAkC,GAAGiB,EAAE,EAAEN,QAAQ,CAAC;EACrF;EAEAS,cAAcA,CAACH,EAAU;IACvB,OAAO,IAAI,CAACd,IAAI,CAACkB,MAAM,CAACrB,SAAS,GAAG,kCAAkC,GAAGiB,EAAE,CAAC;EAC9E;EAEOK,SAASA,CAACC,YAAgB;IAC/B,IAAIC,OAAO,GAAG,KAAK;IACnB,MAAMC,KAAK,GAAO,IAAI,CAACrB,eAAe,CAACsB,QAAQ,EAAE;IACjD,IAAGD,KAAK,IAAI,IAAI,IAAIA,KAAK,EAAC;MACxB,KAAI,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAACF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAC;QACjC,KAAI,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAACN,YAAY,CAACK,MAAM,EAAEC,CAAC,EAAE,EAAC;UACxC,IAAIJ,KAAK,CAACE,CAAC,CAAC,CAACG,QAAQ,KAAKP,YAAY,CAACM,CAAC,CAAC,EAAE;YACzCL,OAAO,GAAG,IAAI;YACd,OAAOA,OAAO;;;;;IAKtB,OAAO,KAAK;EACd;EAAC,QAAAO,CAAA,G;qBAnDU9B,eAAe,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,eAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfrC,eAAe;IAAAsC,OAAA,EAAftC,eAAe,CAAAuC,IAAA;IAAAC,UAAA,EAFd;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}